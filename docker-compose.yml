---
version: '3.7'
services:
  caddy:
    build: caddy
    container_name: caddy
    ports:
      - 80:80
      - 443:443
    command: -agree=true ${CA_URL:-}
    env_file:
      - .env
    labels:
      caddy: '${DOMAIN}'
      caddy.tls.dns: '${TLS_DNS_PROVIDER}'
      caddy.log: /var/log/access.log
      caddy.login.redirect_check_referer: false
      caddy.login.redirect_host_file: /root/.caddy/redirect_hosts.txt
      caddy.login.htpasswd: file=/root/.caddy/.htpasswd
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./config/caddy:/root/.caddy
      - ./logs/caddy:/var/log
    restart: always

  transmission:
    image: haugene/transmission-openvpn
    container_name: transmission
    cap_add:
      - NET_ADMIN
    devices:
      - /dev/net/tun
    labels:
      caddy.address: '${DOMAIN}/transmission'
      caddy.targetport: 9091
      caddy.targetpath: /transmission
      caddy.proxy.transparent:
    dns:
      - 8.8.8.8
      - 8.8.4.4
    volumes:
      - ./config/transmission:/config
      - ./localtime:/etc/localtime:ro
      - ./data/local/downloads/:/data
      - ./config/vpn:/etc/openvpn/custom
    env_file: .env
    restart: unless-stopped

  radarr:
    image: linuxserver/radarr
    container_name: radarr
    env_file: .env
    labels:
      caddy.address: '${DOMAIN}/radarr'
      caddy.targetport: 7878
      caddy.targetpath: /radarr
      caddy.proxy.transparent:
      caddy.jwt.path: /
      caddy.jwt.redirect: /login?backTo=/radarr
      caddy.jwt.except: /api
    volumes:
      - ./config/radarr:/config
      - ./data:/data:shared
      - ./logs/radarr:/config/logs
    depends_on:
      - rclone
    restart: unless-stopped

  sonarr:
    image: linuxserver/sonarr:preview
    container_name: sonarr
    env_file: .env
    labels:
      caddy.address: '${DOMAIN}/sonarr'
      caddy.targetport: 8989
      caddy.targetpath: /sonarr
      caddy.proxy.transparent:
      caddy.jwt.path: /
      caddy.jwt.redirect: /login?backTo=/sonarr
      caddy.jwt.except: /api
    volumes:
      - ./config/sonarr:/config
      - ./data:/data:shared
      - ./logs/sonarr:/config/logs
    depends_on:
      - rclone
    restart: unless-stopped

  jackett:
    image: linuxserver/jackett
    container_name: jackett
    env_file: .env
    labels:
      caddy.address: '${DOMAIN}/jackett'
      caddy.targetport: 9117
      caddy.targetpath: /jackett
      caddy.proxy.transparent:
      caddy.jwt.path: /
      caddy.jwt.redirect: /login?backTo=/jackett
      caddy.jwt.except: /api
    volumes:
      - ./config/jackett:/config/Jackett
      - ./data/local/downloads/watch:/downloads
    restart: unless-stopped

  ombi:
    image: linuxserver/ombi
    container_name: ombi
    env_file: .env
    labels:
      caddy.address: '${DOMAIN}/ombi'
      caddy.targetport: 3579
      caddy.targetpath: /ombi
      caddy.proxy.transparent:
    volumes:
      - ./config/ombi:/config
      - ./logs/ombi:/config/Logs
    restart: unless-stopped
    
  plex:
    image: linuxserver/plex
    container_name: plex
    env_file: .env
    environment:
      - VERSION=latest
    volumes:
      - ./config/plex:/config
      - ./logs/plex:/config/Library/Application Support/Plex Media Server/Logs
      - ./data:/data:shared
    tmpfs: /transcode
    # ports:
    #   - 32400:32400
    network_mode: host
    depends_on:
      - rclone
    restart: unless-stopped

  tautulli:
    image: linuxserver/tautulli
    container_name: tautulli
    labels:
      caddy.address: '${DOMAIN}/tautulli'
      caddy.targetport: 8181
      caddy.targetpath: /tautulli
      caddy.proxy.transparent:
      caddy.jwt.path: /
      caddy.jwt.redirect: /login?backTo=/tautulli
      caddy.jwt.except: /api
    env_file: .env
    volumes:
      - ./config/tautulli:/config
      - ./config/plex/Library/Application Support/Plex Media Server/Logs:/logs:ro
      - ./logs/tautulli:/config/logs
    restart: unless-stopped

  rclone:
    build : rclone-gdrive
    container_name: rclone
    cap_add:
      - SYS_ADMIN
    devices:
      - /dev/fuse
    security_opt:
      - apparmor:unconfined
    env_file: .env
    volumes:
      - ./config/rclone:/config
      - ./logs/rclone:/logs
      - ./data:/data:shared
    restart: always

  portainer:
    image: portainer/portainer
    container_name: portainer
    labels:
      caddy.address: '${DOMAIN}/portainer'
      caddy.proxy: '/ portainer:9000'
      caddy.proxy.without: /portainer
      caddy.proxy.transparent:
      caddy.proxy.websocket:
    volumes:
      - ./config/portainer:/data
      - /var/run/docker.sock:/var/run/docker.sock
    restart: always

  #####################################################################################
  # Maintenance containers

  watchtower:
    image: containrrr/watchtower
    container_name: watchtower
    env_file: .env    
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./localtime:/etc/localtime:ro
    command: --schedule ${WATCHTOWER_SCHEDULE:- "0 0 4 * * *"}
    restart: always

  borgmatic:
    image: b3vis/borgmatic
    container_name: borgmatic
    env_file: .env
    volumes:
      - ./.env:/mnt/source/.env:ro
      - ./docker-compose.override.yml:/mnt/source/docker-compose.override.yml:ro
      - ./config:/mnt/source/config:ro
      - ./data/backups:/mnt/repository
      - ./config/borgmatic:/etc/borgmatic.d/
      - ./config/borgmatic/borg:/root/.config/borg
      - ./data/borgmatic/.cache:/root/.cache/borg
      - /var/run/docker.sock:/var/run/docker.sock:ro
    restart: always